(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: '__=request.args_0___'"
p3
sS'layer'
p4
S'/home/namita/web2py/applications/IIIT_MarketPlace/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport datetime\n    \ndef post_Add():\n    form=SQLFORM(db.advertise)\n    form.vars.add_type="sell"\n    form.vars.status="open"\n    form.vars.ppl_bid=0\n   # form=form.process(next=\'index\')\n    form=form.process()\n    if form.accepted:\n        session.flash="Posted Successfully"\n        redirect(URL(\'index\'))\n    #db.advertise.post_date=request.now()\n    return locals()\n\n\ndef view_Add():\n    #auth_user_with_role = db(db.auth_membership.group_id==request.vars.role).select(d\n    #rows=db(db.advertise.id==request.args(0)).select()\n    ############bidding_rows=db(db.bidding.add_id==request.args(0)).select()\n    query=(db.bidding.add_id==request.args(0)) & (db.advertise.id==request.args(0))\n    rows=db(db.advertise.id==request.args(0)).select()\n    bidder_rows=db(query).select()\n    bid_form=SQLFORM(db.bidding)\n    bid_form.vars.bidder_user_id=auth.user_id\n    bid_form.vars.bidder_user_fn=auth.user.first_name\n    bid_form.vars.bidder_user_ln=auth.user.last_name\n    bid_form.vars.bid_datetime=datetime.datetime.utcnow()\n    bid_form.vars.add_id=request.args(0,cast=int)\n    bid_form.process()\n    if bid_form.accepted:\n        redirect(URL("view_Add/{{=request.args(0)}}"))\n       # response.js = "jQuery(\'.view_post\').get(0).reload;"\n\n\n        \n        \n\n    #bidder_rows=db(db.bidding.add_id==request.args(0)).select()\n   # bidders_rows=db().select()\n   # users = db(db.auth_user.id>=1).select(db.auth_user.ALL)\n    #for user in users:\n       # response.write(user.id)\n       # user_rows=db(db.auth_user.id==user.id).select(db.auth_user.first_name)\n    #    ad_rows=db(db.advertise.created_by==user.id).select()\n   # user_name=db(db.advertise.created_by).select(auth_user.firstname)\n    return locals()\n\n@auth.requires_login()\ndef index():\n   if len(request.args):\n        page=int(request.args[0])\n   else:\n        page=0\n   items_per_page=8\n   limitby=(page*items_per_page,(page+1)*items_per_page+1)\n   rows=db().select(db.advertise.ALL,limitby=limitby)\n   # response.flash = T("Welcome to web2py!")\n   return locals()\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n    \n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(view_Add)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/namita/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/namita/web2py/applications/IIIT_MarketPlace/controllers/default.py", line 124, in <module>\n  File "/home/namita/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/namita/web2py/applications/IIIT_MarketPlace/controllers/default.py", line 32, in view_Add\n    rows=db(db.advertise.id==request.args(0)).select()\n  File "/home/namita/web2py/gluon/dal.py", line 10749, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/namita/web2py/gluon/dal.py", line 2472, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/namita/web2py/gluon/dal.py", line 1868, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/namita/web2py/gluon/dal.py", line 1767, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/namita/web2py/gluon/dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "/home/namita/web2py/gluon/dal.py", line 1440, in EQ\n    self.expand(second, first.type))\n  File "/home/namita/web2py/gluon/dal.py", line 1555, in expand\n    return str(self.represent(expression, field_type))\n  File "/home/namita/web2py/gluon/dal.py", line 2005, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'__=request.args_0___\'\n'
p11
s.